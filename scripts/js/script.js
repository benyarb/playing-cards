// Generated by CoffeeScript 1.3.1
(function() {
  var i, root, _nextId,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (root.App == null) {
    root.App = {};
  }

  if (App.Models == null) {
    App.Models = {};
  }

  App.Models.Rank = (function() {

    function Rank(value) {
      this.value = value;
    }

    Rank.prototype.letter = function() {
      return 'A23456789TJQK'[this.value];
    };

    Rank.prototype.nextLower = function() {
      if (this.value === 0) {
        return null;
      } else {
        return App.Models.ranks[this.value - 1];
      }
    };

    Rank.prototype.nextHigher = function() {
      if (this.value === 12) {
        return null;
      } else {
        return App.Models.ranks[this.value + 1];
      }
    };

    return Rank;

  })();

  App.Models.Suit = (function() {

    function Suit(value) {
      this.value = value;
    }

    Suit.prototype.letter = function() {
      return 'CDHS'.charAt(this.value);
    };

    Suit.prototype.color = function() {
      if (this.letter() === 'C' || this.letter() === 'S') {
        return 'black';
      } else {
        return 'red';
      }
    };

    return Suit;

  })();

  App.Models.ranks = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 13; i = ++_i) {
      _results.push(new App.Models.Rank(i));
    }
    return _results;
  })();

  App.Models.suits = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 4; i = ++_i) {
      _results.push(new App.Models.Suit(i));
    }
    return _results;
  })();

  _nextId = 0;

  App.Models.Card = (function() {

    function Card(rank, suit) {
      this.rank = rank;
      this.suit = suit;
      this.id = "id" + (_nextId++);
    }

    return Card;

  })();

  App.Models.Game = (function() {

    Game.prototype.cardsToTurn = null;

    Game.prototype.numberOfFoundations = 4;

    Game.prototype.numberOfTableauPiles = 7;

    function Game() {
      var i;
      this.faceUpTableauPiles = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.numberOfTableauPiles; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push([]);
        }
        return _results;
      }).call(this);
      this.faceDownTableauPiles = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.numberOfTableauPiles; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push([]);
        }
        return _results;
      }).call(this);
      this.stock = [];
      this.waste = [];
      this.foundations = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.numberOfFoundations; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push([]);
        }
        return _results;
      }).call(this);
      this.undoStack = [];
      this.locators = {};
      this.locators.foundations = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.numberOfFoundations; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(['foundations', i]);
        }
        return _results;
      }).call(this);
      this.locators.faceDownTableauPiles = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.numberOfTableauPiles; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(['faceDownTableauPiles', i]);
        }
        return _results;
      }).call(this);
      this.locators.faceUpTableauPiles = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.numberOfTableauPiles; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(['faceUpTableauPiles', i]);
        }
        return _results;
      }).call(this);
      this.locators.all = [['stock'], ['waste']].concat(__slice.call(this.locators.foundations), __slice.call(this.locators.faceDownTableauPiles), __slice.call(this.locators.faceUpTableauPiles));
      this.deck = _(this.createDeck()).shuffle();
    }

    Game.prototype.deal = function() {
      var deckCopy, i, j, _i, _j, _ref, _results;
      deckCopy = this.deck.slice(0);
      for (i = _i = 0, _ref = this.faceDownTableauPiles.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0; 0 <= i ? _j < i : _j > i; j = 0 <= i ? ++_j : --_j) {
          this.faceDownTableauPiles[i].push(deckCopy.pop());
        }
        this.faceUpTableauPiles[i].push(deckCopy.pop());
      }
      _results = [];
      while (deckCopy.length) {
        _results.push(this.stock.push(deckCopy.pop()));
      }
      return _results;
    };

    Game.prototype.createDeck = function() {
      var rank, suit;
      return _((function() {
        var _i, _len, _ref, _results;
        _ref = App.Models.suits;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          suit = _ref[_i];
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = App.Models.ranks;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              rank = _ref1[_j];
              _results1.push(new App.Models.Card(rank, suit));
            }
            return _results1;
          })());
        }
        return _results;
      })()).flatten();
    };

    return Game;

  })();

  if (App.Controllers == null) {
    App.Controllers = {};
  }

  App.rootElement = '#card-table';

  App.Controllers.Card = (function() {

    Card.prototype.size = {
      width: 79,
      height: 123
    };

    Card.prototype.element = null;

    function Card(model) {
      this.model = model;
    }

    Card.prototype.appendTo = function(rootElement) {
      this.element = document.createElement('div');
      this.element.className = 'card';
      this.element.id = this.model.id;
      $(this.element).css(this.size);
      return $(rootElement).append(this.element);
    };

    Card.prototype.destroy = function() {
      return $(this.element).remove();
    };

    Card.prototype.setRestingState = function(pos, zIndex, faceUp) {
      return this.restingState = {
        position: _.clone(pos),
        zIndex: zIndex,
        faceUp: faceUp
      };
    };

    Card.prototype.jumpToRestingPosition = function() {
      var currentState,
        _this = this;
      currentState = _(this.restingState).clone();
      return $(this.element).queue(function(next) {
        $(_this.element).css({
          zIndex: currentState.zIndex
        }).css(currentState.position);
        return next();
      });
    };

    Card.prototype.animateToRestingPosition = function(options, liftoff) {
      var currentState,
        _this = this;
      if (liftoff == null) {
        liftoff = true;
      }
      currentState = _(this.restingState).clone();
      $(this.element).queue(function(next) {
        $(_this.element).css({
          zIndex: currentState.zIndex + (liftoff ? 1000 : 0)
        });
        return next();
      });
      $(this.element).animate(currentState.position, options);
      return $(this.element).queue(function(next) {
        $(_this.element).css({
          zIndex: currentState.zIndex
        });
        return next();
      });
    };

    Card.prototype.jumpToRestingFace = function() {
      var currentState,
        _this = this;
      currentState = _(this.restingState).clone();
      return $(this.element).queue(function(next) {
        $(_this.element).css({
          backgroundPosition: _this._getBackgroundPosition(currentState.faceUp)
        });
        return next();
      });
    };

    Card.prototype.animateToRestingFace = function(options) {
      $(this.element).animate({
        scale: 1.08
      }, {
        duration: options.duration / 9,
        easing: 'linear'
      });
      $(this.element).animate({
        scaleX: 0
      }, {
        duration: options.duration * 3 / 9,
        easing: 'linear'
      });
      this.jumpToRestingFace();
      $(this.element).animate({
        scaleX: 1
      }, {
        duration: options.duration * 4 / 9,
        easing: 'linear'
      });
      return $(this.element).animate({
        scale: 1
      }, {
        duration: options.duration / 9,
        easing: 'linear'
      });
    };

    Card.prototype._getBackgroundPosition = function(faceUp) {
      var height, left, top, width, _ref, _ref1;
      _ref = [this.size.width, this.size.height], width = _ref[0], height = _ref[1];
      if (faceUp) {
        left = this.model.rank.value * width;
        top = 'CDHS'.indexOf(this.model.suit.letter()) * height;
      } else {
        _ref1 = [2 * width, 4 * height], left = _ref1[0], top = _ref1[1];
      }
      return "-" + left + "px -" + top + "px";
    };

    return Card;

  })();

  App.Controllers.Test = (function() {

    function Test() {
      new App.Models.Game;
    }

    return Test;

  })();

}).call(this);
